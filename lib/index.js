// Generated by CoffeeScript 1.7.1

/*
Created by massimo on 14-3-14.
 */

(function() {
  var dbError, execute, executeFirstRow, executeScalar, insert, mysql, options, setOptions, update, _;

  mysql = require("mysql");

  _ = require("underscore");

  options = {
    dbConfig: {
      host: 'localhost',
      user: 'root',
      port: 3306,
      password: '',
      database: 'default'
    },
    log: function(err) {
      return console.dir(err);
    },
    customError: null,
    debug: true
  };


  /*
  获取连接
  @param {Function} cb callback function
   */

  exports.createConnection = function(_dbConfig) {
    var conn;
    conn = mysql.createConnection(_dbConfig);
    conn.execute = function() {
      return execute.apply(this, arguments);
    };
    conn.executeScalar = function() {
      return executeScalar.apply(this, arguments);
    };
    conn.update = function() {
      return update.apply(this, arguments);
    };
    conn.insert = function() {
      return insert.apply(this, arguments);
    };
    conn.executeFirstRow = function() {
      return executeFirstRow.apply(this, arguments);
    };
    return conn;
  };


  /*
  记录异常并返回
  @param {Error} err
  @param {Function} [cb] callback function
  @param {Error} [cusResponseError] custom response error
   */

  dbError = exports.dbError = function(err, cb, cusResponseError) {
    if (!config.isProduct()) {
      console.dir(err);
    }
    if (_.isFunction(cb)) {
      return cb(cusResponseError || new Error("operation fail"));
    }
  };


  /*
  执行 sql
  @param {String} sql
  @param {Array} paras parameters array
  @param {Function} cb callback function
   */

  execute = function(sql, paras, cb) {
    if (_.isFunction(paras)) {
      cb = paras;
      paras = [];
    }
    return this.query(sql, paras, function(err, result) {
      if (_.isFunction(cb)) {
        if (err) {
          return cb(err);
        } else {
          return cb(err, result);
        }
      }
    });
  };


  /*
  查询第一行第一列的内容
  @param {String} sql
  @param {Array} paras parameters array
  @param {Function} cb callback function
   */

  executeScalar = function(sql, paras, cb) {
    if (_.isFunction(paras)) {
      cb = paras;
      paras = [];
    }
    return this.query(sql, paras, function(err, result) {
      var name, value, _ref;
      if (_.isFunction(cb)) {
        if (err) {
          return cb(err);
        } else {
          if (result.length > 0) {
            _ref = result[0];
            for (name in _ref) {
              value = _ref[name];
              cb(null, value);
              return;
            }
          } else {
            return cb(null, null);
          }
        }
      }
    });
  };


  /*
      更新
   */

  update = function(sql, paras, cb) {
    if (_.isFunction(paras)) {
      cb = paras;
      paras = [];
    }
    return this.query(sql, paras, function(err, result) {
      if (_.isFunction(cb)) {
        if (err) {
          return cb(err);
        } else if (result.changedRows > 0) {
          return cb(null, true, result.changedRows);
        } else {
          return cb(null, false);
        }
      }
    });
  };


  /*
      插入
   */

  insert = function(sql, paras, cb) {
    if (_.isFunction(paras)) {
      cb = paras;
      paras = [];
    }
    return this.query(sql, paras, function(err, result) {
      if (_.isFunction(cb)) {
        if (err) {
          return cb(err);
        } else if (result.affectedRows > 0) {
          return cb(null, true, result.insertId);
        } else {
          return cb(null, false);
        }
      }
    });
  };


  /*
      获取第一行数据
   */

  executeFirstRow = function(sql, paras, cb) {
    if (_.isFunction(paras)) {
      cb = paras;
      paras = [];
    }
    return this.query(sql, paras, function(err, result) {
      if (_.isFunction(cb)) {
        if (err) {
          return cb(err);
        } else if (result.length > 0) {
          return cb(null, result[0]);
        } else {
          return cb(null, null);
        }
      }
    });
  };


  /*
      set default options
      @param {Object} options options parameter
      @param {Object} defaultOptions default options
      @param {Boolean} override override options by defaultOptions or not
   */

  setOptions = function(options, defaultOptions, override) {
    var key, value, _results;
    if (!defaultOptions) {
      return;
    }
    if (!options) {
      return options = defaultOptions;
    } else {
      _results = [];
      for (key in defaultOptions) {
        value = defaultOptions[key];
        if (override) {
          if (defaultOptions[key]) {
            _results.push(options[key] = value);
          } else {
            _results.push(void 0);
          }
        } else {
          if (!options[key]) {
            _results.push(options[key] = value);
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    }
  };

}).call(this);

//# sourceMappingURL=index.map
