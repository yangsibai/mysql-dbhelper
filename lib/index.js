// Generated by CoffeeScript 1.7.1

/*
created by massimo on 14-3-14.
 */

(function() {
  var $execute, $executeFirstRow, $executeNonQuery, $executeScalar, $exist, $insert, $update, createConnection, execute, executeFirstRow, executeNonQuery, executeScalar, exist, exports, insert, mysql, update, _, _options;

  mysql = require("mysql");

  _ = require("underscore");


  /*
      default config
   */

  _options = {
    dbConfig: {
      host: 'localhost',
      user: 'root',
      port: 3306,
      password: '',
      database: 'test'
    },
    onError: function(err) {
      return console.dir(err);
    },
    customError: null,
    timeout: 60,
    debug: false
  };


  /*
  	获取连接
  	@param {function} cb callback function
   */

  createConnection = function() {
    var conn, proxied;
    conn = mysql.createConnection(_options.dbConfig);
    setTimeout(function() {
      if (!conn._socket._readableState.ended) {
        return conn.end();
      }
    }, _options.timeout * 1000);
    conn.execute = function() {
      return execute.apply(this, arguments);
    };
    conn.executeScalar = function() {
      return executeScalar.apply(this, arguments);
    };
    conn.executeFirstRow = function() {
      return executeFirstRow.apply(this, arguments);
    };
    conn.executeNonQuery = function() {
      return executeNonQuery.apply(this, arguments);
    };
    conn.update = function() {
      return update.apply(this, arguments);
    };
    conn.insert = function() {
      return insert.apply(this, arguments);
    };
    conn.exist = function() {
      return exist.apply(this, arguments);
    };
    conn.$execute = function() {
      return $execute.apply(this, arguments);
    };
    conn.$executeScalar = function() {
      return $executeScalar.apply(this, arguments);
    };
    conn.$executeFirstRow = function() {
      return $executeFirstRow.apply(this, arguments);
    };
    conn.$executeNonQuery = function() {
      return $executeNonQuery.apply(this, arguments);
    };
    conn.$update = function() {
      return $update.apply(this, arguments);
    };
    conn.$insert = function() {
      return $insert.apply(this, arguments);
    };
    conn.$exist = function() {
      return $exist.apply(this, arguments);
    };
    proxied = conn.end;
    conn.end = function(cb) {
      if (!conn._socket._readableState.ended) {
        return proxied.apply(this, arguments);
      }
      if (_.isFunction(cb)) {
        return cb(new Error("connection has been closed"));
      }
    };
    return conn;
  };


  /*
  	执行 sql
  	@param {String} sql
  	@param {Array} paras parameters array
  	@param {Function} cb callback function
   */

  execute = function(sql, paras, cb) {
    if (_.isFunction(paras) && _.isUndefined(cb)) {
      cb = paras;
      paras = [];
    }
    return this.query(sql, paras, function(err, result) {
      if (err) {
        if (_options.debug) {
          console.dir(err);
        }
        _options.onError(err);
        if (_options.customError) {
          err = _options.customError;
        }
      }
      if (_.isFunction(cb)) {
        return cb(err, result);
      }
    });
  };


  /*
  	查询并在完成后立即关闭连接
      @param {String} sql
      @param {Array} [paras]
      @param {Function} cb callback function
   */

  $execute = function(sql, paras, cb) {
    if (_.isFunction(paras) && _.isUndefined(cb)) {
      cb = paras;
      paras = [];
    }
    return this.execute(sql, paras, (function(_this) {
      return function() {
        if (_.isFunction(cb)) {
          cb.apply(_this, arguments);
        }
        return _this.end();
      };
    })(this));
  };


  /*
  	查询第一行第一列的内容
  	@param {String} sql
  	@param {Array} paras parameters array
  	@param {Function} cb callback function
   */

  executeScalar = function(sql, paras, cb) {
    if (_.isFunction(paras) && _.isUndefined(cb)) {
      cb = paras;
      paras = [];
    }
    return this.execute(sql, paras, function(err, result) {
      var name, value, _ref;
      if (_.isFunction(cb)) {
        if (err) {
          return cb(err);
        } else if (result.length > 0) {
          _ref = result[0];
          for (name in _ref) {
            value = _ref[name];
            cb(null, value);
            return;
          }
        } else {
          return cb(null, null);
        }
      }
    });
  };


  /*
  	查询第一行第一列的内容，然后自动关闭连接
      @param {String} sql
      @param {Array} [paras]
      @param {Function} cb callback function
   */

  $executeScalar = function(sql, paras, cb) {
    if (_.isFunction(paras) && _.isUndefined(cb)) {
      cb = paras;
      paras = [];
    }
    return this.executeScalar(sql, paras, (function(_this) {
      return function() {
        if (_.isFunction(cb)) {
          cb.apply(_this, arguments);
        }
        return _this.end();
      };
    })(this));
  };


  /*
  	更新
      @param {String} sql
      @param {Array} [paras]
      @param {Function} cb callback function
   */

  update = function(sql, paras, cb) {
    if (_.isFunction(paras) && _.isUndefined(cb)) {
      cb = paras;
      paras = [];
    }
    return this.execute(sql, paras, function(err, result) {
      if (_.isFunction(cb)) {
        if (err) {
          return cb(err);
        } else if (result.changedRows > 0) {
          return cb(null, true, result.changedRows);
        } else {
          return cb(null, false);
        }
      }
    });
  };


  /*
  	更新并且自动关闭连接
      @param {String} sql
      @param {Array} [paras]
      @param {Function} cb callback function
   */

  $update = function(sql, paras, cb) {
    if (_.isFunction(paras) && _.isUndefined(cb)) {
      cb = paras;
      paras = [];
    }
    return this.update(sql, paras, (function(_this) {
      return function() {
        if (_.isFunction(cb)) {
          cb.apply(_this, arguments);
        }
        return _this.end();
      };
    })(this));
  };


  /*
  	插入
      @param {String} sql
      @param {Array} [paras]
      @param {Function} cb callback function
   */

  insert = function(sql, paras, cb) {
    if (_.isFunction(paras) && _.isUndefined(cb)) {
      cb = paras;
      paras = [];
    }
    return this.execute(sql, paras, function(err, result) {
      if (_.isFunction(cb)) {
        if (err) {
          return cb(err);
        } else if (result.affectedRows > 0) {
          return cb(null, true, result.insertId);
        } else {
          return cb(null, false);
        }
      }
    });
  };


  /*
  	插入数据并且自动关闭连接
      @param {String} sql
      @param {Array} [paras]
      @param {Function} cb callback function
   */

  $insert = function(sql, paras, cb) {
    if (_.isFunction(paras) && _.isUndefined(cb)) {
      cb = paras;
      paras = [];
    }
    return this.insert(sql, paras, (function(_this) {
      return function() {
        if (_.isFunction(cb)) {
          cb.apply(_this, arguments);
        }
        return _this.end();
      };
    })(this));
  };


  /*
  	执行sql,返回受影响的行数
      @param {String} sql
      @param {Array} [paras]
      @param {Function} cb callback function
   */

  executeNonQuery = function(sql, paras, cb) {
    if (_.isFunction(paras) && _.isUndefined(cb)) {
      cb = paras;
      paras = [];
    }
    return this.execute(sql, paras, function(err, result) {
      if (_.isFunction(cb)) {
        if (err) {
          return cb(err);
        } else if (result.affectedRows > 0) {
          return cb(null, true, result.affectedRows);
        } else {
          return cb(null, false);
        }
      }
    });
  };


  /*
  	执行sql,返回受影响的行数，然后自动关闭连接
      @param {String} sql
      @param {Array} [paras]
      @param {Function} cb callback function
   */

  $executeNonQuery = function(sql, paras, cb) {
    if (_.isFunction(paras) && _.isUndefined(cb)) {
      cb = paras;
      paras = [];
    }
    return this.executeNonQuery(sql, paras, (function(_this) {
      return function() {
        if (_.isFunction(cb)) {
          cb.apply(_this, arguments);
        }
        return _this.end();
      };
    })(this));
  };


  /*
  	获取第一行数据
      @param {String} sql
      @param {Array} [paras]
      @param {Function} cb callback function
   */

  executeFirstRow = function(sql, paras, cb) {
    if (_.isFunction(paras) && _.isUndefined(cb)) {
      cb = paras;
      paras = [];
    }
    return this.execute(sql, paras, function(err, result) {
      if (_.isFunction(cb)) {
        if (err) {
          return cb(err);
        } else if (result.length > 0) {
          return cb(null, result[0]);
        } else {
          return cb(null, null);
        }
      }
    });
  };


  /*
  	获取第一行的数据，然后自动关闭连接
      @param {String} sql
      @param {Array} [paras]
      @param {Function} cb callback function
   */

  $executeFirstRow = function(sql, paras, cb) {
    if (_.isFunction(paras) && _.isUndefined(cb)) {
      cb = paras;
      paras = [];
    }
    return this.executeFirstRow(sql, paras, (function(_this) {
      return function() {
        if (_.isFunction(cb)) {
          cb.apply(_this, arguments);
        }
        return _this.end();
      };
    })(this));
  };


  /*
      判断是否存在
      @param {String} sql
      @param {Array} [paras]
      @param {Function} cb callback function
   */

  exist = function(sql, paras, cb) {
    if (_.isFunction(paras) && _.isUndefined(cb)) {
      cb = paras;
      paras = [];
    }
    return this.execute(sql, paras, function(err, results) {
      if (_.isFunction(cb)) {
        if (err) {
          return cb(err);
        } else if (results.length > 0) {
          return cb(null, true);
        } else {
          return cb(null, false);
        }
      }
    });
  };


  /*
      判断是否存在，然后自动关闭连接
      @param {String} sql
      @param {Array} [paras]
      @param {Function} cb callback function
   */

  $exist = function(sql, paras, cb) {
    if (_.isFunction(paras) && _.isUndefined(cb)) {
      cb = paras;
      paras = [];
    }
    return this.execute(sql, paras, (function(_this) {
      return function(err, results) {
        if (_.isFunction(cb)) {
          if (err) {
            cb(err);
          } else if (results.length > 0) {
            cb(null, true, results);
          } else {
            cb(null, false, results);
          }
          return _this.end();
        }
      };
    })(this));
  };

  module.exports = exports = function(options) {
    var key, value;
    for (key in options) {
      value = options[key];
      _options[key] = value;
    }
    return {
      createConnection: createConnection
    };
  };

}).call(this);

//# sourceMappingURL=index.map
